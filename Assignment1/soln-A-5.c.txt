int main()
{
    int a, b, c, d;

    d = 10;
    if (c > d) {
        a = 3;
        b = 2;
    } else {
        a = 2;
        b = 3;
    }

    c = a + b;
}

^M
;; Function main (main, funcdef_no=0, decl_uid=1499, cgraph_uid=1, symbol_order=0)^M
^M
;; 1 loops found^M
;;^M
;; Loop 0^M
;;  header 0, latch 1^M
;;  depth 0, outer -1^M
;;  nodes: 0 1 2 3 4 5 6^M
;; 2 succs { 3 4 }^M
;; 3 succs { 5 }^M
;; 4 succs { 5 }^M
;; 5 succs { 6 }^M
;; 6 succs { 1 }^M
main ()^M
{^M
  int d;^M
  int c;^M
  int b;^M
  int a;^M
  int D.1509;^M
^M
  <bb 2> :^M
  d = 10;
  if (c > d)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
^M
  <bb 3> :^M
  a = 3;
  b = 2;
  goto <bb 5>; [INV]
^M
  <bb 4> :^M
  a = 2;
  b = 3;
^M
A-5.
 <bb 5> :^M
  c = a + b;
  D.1509 = 0;
^M
  <bb 6> :^M
<L3>:
  return D.1509;
^M
}^M
^M
^M




^M
;; Function main (main, funcdef_no=0, decl_uid=1499, cgraph_uid=1, symbol_order=0)^M
^M
main ()^M
{^M
  int d;^M
  int c;^M
  int b;^M
  int a;^M
  int D.1509;^M
  int _10;^M
^M
  <bb 2> :^M
  d_3 = 10;
  if (c_4(D) > d_3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
^M
  <bb 3> :^M
  a_7 = 3;
  b_8 = 2;
  goto <bb 5>; [INV]
^M
  <bb 4> :^M
  a_5 = 2;
  b_6 = 3;
^M
  <bb 5> :^M
  # a_1 = PHI <a_7(3), a_5(4)>
  # b_2 = PHI <b_8(3), b_6(4)>
  c_9 = a_1 + b_2;
  _10 = 0;
^M
  <bb 6> :^M
<L3>:
  return _10;
^M
}^M
^M






1. This is more like the SSA form I was expecting. Maybe (D) means it's missing
   a definition? (e.g. c is undefined in its use in the first conditional).

2. Syntax of phi statements is probably PHI < prec_1, prec_2, ... prec_n > where
   prec_i is name(bb) - name being the name of the variable and bb the number of
   the basic block in which it was declared. There will be a prec_i for ecah
   preceding BB from which control flow can enter the current BB.

3. This could come from a switch statement or cascading if-else blocks.


