main ()^M
{
  int a;
  int b;
  int c;
  int p;
  int q;
  double r;

  p = 6;
  a = 10;
  b = 20;
  _1 = a * b;
  c = _1 + 25;
  p = 6;
  q = Z;
  r = 3.45e+1;
  _2 = (int) r;
  Z = _2;
  Z.0_3 = Z;
  _4 = Z.0_3 + 1;
  Z = _4;
}
^M
^M

1)On each line, new variable is initialized.
2)Temporary variables are introduced to simplify the complex expression. When more than two operators are present in the expression. They are reduced to single operator at a time. eg. c=a*b+25 gets reduced to _1=a*b
and c=_1+25. Thus reducing to one operator at a time.
3)Doubles are represented in exponential form to the base of 10. After that, it is assigned to temporary variable with the help of int keyword.
4)Increment Operation is done using temporary variable.

Optional Problem:

main ()^M
gimple_bind <
  int a;
  int b;
  int c;
  int p;
  int q;
  double r;

  gimple_assign <integer_cst, p, 6, NULL, NULL>
  gimple_assign <integer_cst, a, 10, NULL, NULL>
  gimple_assign <integer_cst, b, 20, NULL, NULL>
  gimple_assign <mult_expr, _1, a, b, NULL>
  gimple_assign <plus_expr, c, _1, 25, NULL>
  gimple_assign <integer_cst, p, 6, NULL, NULL>
  gimple_assign <var_decl, q, Z, NULL, NULL>
  gimple_assign <real_cst, r, 3.45e+1, NULL, NULL>
  gimple_assign <fix_trunc_expr, _2, r, NULL, NULL>
  gimple_assign <ssa_name, Z, _2, NULL, NULL>
  gimple_assign <var_decl, Z.0_3, Z, NULL, NULL>
  gimple_assign <plus_expr, _4, Z.0_3, 1, NULL>
  gimple_assign <ssa_name, Z, _4, NULL, NULL>
>
^M
^M

